var dojo = angular.module('dojo', ['ngRoute', 'ngDragDrop']);

var dojo = angular.module('dojo');

dojo.config(["$routeProvider", function ($routeProvider) {
  $routeProvider

  .when('/:mission/:lesson/slide/:slideCount', {
    templateUrl: 'assets/template/lessonTemplate.html',
    controller: 'playerCtrl',
    resolve: {
      lessonArray: ["getLesson", function(getLesson){
        return getLesson.getLessonData();
      }]
    }
  })

  .when('/', {
    templateUrl:'assets/template/homeTemplate.html',
    controller: 'mainCtrl'
  });
}]);

var dojo = angular.module('dojo');

dojo.controller('mainCtrl', ["$scope", "speechRec", function($scope, speechRec) {
  $scope.speechRec = speechRec;
  $scope.start = speechRec.start;
  $scope.stop = speechRec.stop;
  $scope.answer = '';

  $scope.sidebar = false;
  $scope.sidebarClass = false;
  $scope.sidebarToggle = function() {
    $scope.sidebar = !$scope.sidebar;
    $scope.sidebarClass = !$scope.sidebarClass;
  };
}]);

var dojo = angular.module('dojo');

dojo.controller('playerCtrl', ["$scope", "$timeout", "$routeParams", "$location", "$http", "lessonArray", "player", "userInput", "speechRec", "gradingService", function($scope, $timeout, $routeParams, $location, $http, lessonArray, player, userInput, speechRec, gradingService) {
// Get Lesson Data
  $scope.currentSlide = lessonArray[$routeParams.slideCount - 1];
  $scope.lessonLength = lessonArray.length;
  if($scope.currentSlide.compT){$scope.slideObj = $scope.currentSlide.compT;}
  if($scope.currentSlide.convoT){$scope.slideObj = $scope.currentSlide.convoT;}
  if($scope.currentSlide.prodT){$scope.slideObj = $scope.currentSlide.prodT;}
  if($scope.currentSlide.imgT){$scope.slideObj = $scope.currentSlide.imgT;}
  if($scope.currentSlide.statT){$scope.slideObj = $scope.currentSlide.statT;}
  if($scope.currentSlide.teachT){$scope.slideObj = $scope.currentSlide.teachT;}
  if($scope.currentSlide.uniqueT){$scope.slideObj = $scope.currentSlide.uniqueT;}
  if($scope.currentSlide.pattT.prompt){$scope.slideObj = $scope.currentSlide.pattT;}
  if(!$scope.currentSlide.audioFile){$scope.slideObj.audioFile = '';}

  $scope.slideObj.audioPlay = player.play;

// User Data
  $scope.slideObj.userName = userInput.userName;
  $scope.slideObj.job = userInput.job;
  $scope.slideObj.iAmJob = userInput.iAmJob;
  $scope.slideObj.jobEnglish = userInput.jobEnglish;
  $scope.slideObj.jobDanish = userInput.jobDanish;
  $scope.slideObj.jobTitle = userInput.jobTitle;
  $scope.slideObj.jobPronunciation = userInput.jobPronunciation;
//    Autoplay Unique Slides
  setTimeout(function() {$(".quoteLine-auto").removeClass("invisible");}, 700);
  setTimeout(function() {$(".section1-auto").removeClass("invisible");}, 700);
  setTimeout(function() {$(".section2-auto").removeClass("invisible");}, 1400);

//    Navigation
  $scope.slideNum = $routeParams.slideCount;
  $scope.prevSlide = function() {
    // $scope.slideNum = $routeParams.slideCount;
    $scope.slideNum--;
    $scope.newUrl = $routeParams.mission + '/' + $routeParams.lesson + '/slide/' + $scope.slideNum;
    $location.path($scope.newUrl);
  };
  $scope.nextSlide = function() {
    // $scope.slideNum = $routeParams.slideCount;
    $scope.slideNum++;
    $scope.newUrl = $routeParams.mission + '/' + $routeParams.lesson + '/slide/' + $scope.slideNum;
    $location.path($scope.newUrl);
  };
  $scope.submitToNext = function() {
    angular.element($("#submit").addClass("hidden"));
    angular.element($("#next").removeClass("hidden"));
  };

//    Grading
  $scope.slideObj.toGrade = '';
  $scope.slideObj.responseText = '';
  $scope.gradeProd = function() {
    gradingService.gradeProd($scope.slideObj.toGrade, $scope.slideObj.answerKey);
    $scope.slideObj.responseText = gradingService.responseText;
    $scope.submitToNext();
  };
  $scope.gradePatt = function() {
    gradingService.gradePatt($scope.slideObj.toGrade, $scope.slideObj.answerKey);
    $scope.slideObj.responseText = gradingService.responseText;
    $scope.submitToNext();
  };
  $scope.gradeComp = function() {
    gradingService.gradeComp($scope.slideObj.toGrade, $scope.slideObj.answerKey);
    $scope.slideObj.responseText = gradingService.responseText;
    $scope.submitToNext();
  };
  $scope.gradeName = function() {
    userInput.userName = $scope.slideObj.userName;
    gradingService.gradeName($scope.slideObj.userName);
    $scope.submitToNext();
  };
  $scope.slideObj.gradeFunc = '';
  $scope.slideObj.submitButton = false;
  $scope.slideSettings = function (){
    if($scope.currentSlide.slidePosition === 2){
      $scope.slideObj.gradeFunc = $scope.gradeName;
      $scope.slideObj.submitButton = true;
    }else if($scope.currentSlide.slidePosition === 15){
      $scope.slideObj.gradeFunc = $scope.gradeProd;
      $scope.slideObj.submitButton = true;
      $scope.slideObj.phrase += (' ' + $scope.slideObj.userName);
      $scope.slideObj.answerKey += (' ' + $scope.slideObj.userName);
    }else if($scope.currentSlide.slidePosition === 17){
      $scope.slideObj.audioFile = $scope.slideObj.jobTitle;
      $scope.slideObj.danish = $scope.slideObj.jobDanish;
      $scope.slideObj.english = $scope.slideObj.jobEnglish;
      $scope.slideObj.modalTitle = $scope.slideObj.jobTitle;
      $scope.slideObj.modalBody = $scope.slideObj.jobPronunciation;
    }else if($scope.currentSlide.slidePosition == $scope.currentSlide.slidePosition === 18){
      $scope.slideObj.gradeFunc = $scope.gradeProd;
      $scope.slideObj.submitButton = true;
      $scope.slideObj.phrase = $scope.slideObj.jobEnglish;
      $scope.slideObj.answerKey = $scope.slideObj.jobDanish;
    }else if( $scope.currentSlide.slidePosition === 19){
      $scope.slideObj.gradeFunc = $scope.gradeProd;
      $scope.slideObj.submitButton = true;
      $scope.slideObj.phrase += (' ' + $scope.slideObj.jobEnglish);
      $scope.slideObj.answerKey += (' ' + $scope.slideObj.jobDanish);
    }else if($scope.currentSlide.compT){
        $scope.slideObj.gradeFunc = $scope.gradeComp;
        $scope.slideObj.submitButton = true;
    }else if($scope.currentSlide.prodT){
      $scope.slideObj.gradeFunc = $scope.gradeProd;
      $scope.slideObj.submitButton = true;
    }else if($scope.currentSlide.pattT.prompt){
      $scope.slideObj.gradeFunc = $scope.gradePatt;
      $scope.slideObj.submitButton = true;
    }
  };
  $scope.slideSettings();

  $scope.accountant = function() {
    userInput.job = $scope.slideObj.audioFile.revisor;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErRevisor;
    userInput.jobDanish = 'revisor';
    userInput.jobEnglish = 'accountant';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/images/revisorWord.png';
    userInput.jobPronunciation = 'assets/lessons/introduce-yourself/introduction-1/images/rPronunciation.png';
    $scope.nextSlide();
  };
  $scope.analyst = function() {
    userInput.job = $scope.slideObj.audioFile.analytiker;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErAnalytiker;
    userInput.jobDanish = 'analytiker';
    userInput.jobEnglish = 'analyst';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/images/analytikerWord.png';
    userInput.jobPronunciation = 'assets/lessons/introduce-yourself/introduction-1/images/yPronunciation.png';
    $scope.nextSlide();
  };
  $scope.consultant = function() {
    userInput.job = $scope.slideObj.audioFile.konsulent;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErKonsulent;
    userInput.jobDanish = 'konsulent';
    userInput.jobEnglish = 'consultant';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/images/konsulentWord.png';
    userInput.jobPronunciation = '';
    $scope.nextSlide();
  };
  $scope.designer = function() {
    userInput.job = $scope.slideObj.audioFile.designer;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErDesigner;
    userInput.jobDanish = 'designer';
    userInput.jobEnglish = 'designer';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/images/designerWord.png';
    userInput.jobPronunciation = 'assets/lessons/introduce-yourself/introduction-1/images/rPronunciation.png';
    $scope.nextSlide();
  };
  $scope.engineer = function() {
    userInput.job = $scope.slideObj.audioFile.ingenior;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErIngenior;
    userInput.jobDanish = 'ingeniør';
    userInput.jobEnglish = 'engineer';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/images/ingeniorWord.png';
    userInput.jobPronunciation = 'assets/lessons/introduce-yourself/introduction-1/images/oPronunciation.png';
    $scope.nextSlide();
  };
  $scope.manager = function() {
    userInput.job = $scope.slideObj.audioFile.direktor;
    userInput.iAmJob = $scope.slideObj.audioFile.jegErDirektor;
    userInput.jobDanish = 'direktør';
    userInput.jobEnglish = 'manager';
    userInput.jobTitle = 'assets/lessons/introduce-yourself/introduction-1/direktorWord.png';
    userInput.jobPronunciation = 'assets/lessons/introduce-yourself/introduction-1/images/oPronunciation.png';
    $scope.nextSlide();
  };
}]);

var dojo = angular.module('dojo');

dojo.directive("comprehensionAssessment", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/comprehension/compTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    controller: ["$scope", function($scope) {
      $scope.select = function(selectionText) {
        $scope.responseChosen = selectionText;
        $scope.data.toGrade = selectionText;
        // $scope.answerKey = $scope.data.answerKey;
        angular.element($(".section1").addClass("hidden"));
        angular.element($(".response-selection").removeClass("hidden"));
        angular.element($("#mascot").attr("src", 'assets/images/mascotChallengeBeard.png'));
      };
    }],
    link: function(scope, elements, attrs) {
//            AutoPlay
      setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("convoAssessment", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/conversation/convoTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    controller: ["$scope", "speechRec", function($scope, speechRec){
      $scope.toggleSpeechInput = function() {
        speechRec.toggleStartStop();
      };
      $scope.answerKey = $scope.answerText;
      $scope.inputText = '';
      $scope.formatAnswer = function() {
        $scope.toGrade = [$scope.inputText, $scope.answerText];
        if($scope.inputText.toLowerCase() == $scope.answerText.toLowerCase()) {
          $scope.responseGraded = 'Fantastic';
        }else {
          $scope.responseGraded = 'Try Again';
        }
      };
    }],
    link: function(scope, elements, attrs) {
//            AutoPlay
      setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
    }
  };
 });

var dojo = angular.module('dojo');

dojo.directive("imagePage", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/imagepage/imageTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    link: function(scope, elements, attrs) {
//            AutoPlay
      setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("patternAssessment", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/pattern/pattTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    controller: ["$scope", function($scope){
      $scope.data.answers = [];
      $scope.dropCallback = function(){
        $scope.data.toGrade = $scope.data.answers;
      };
    }],
    link: function(scope, elements, attrs) {
      if(scope.data.prompt){
        if(!scope.data.list0[0]){
          angular.element($(".list0").addClass("hidden"));
          angular.element($(".list1").addClass("col-xs-offset-1point5"));
        }else if(!scope.data.list1[0]){
          angular.element($(".list1").addClass("hidden"));
          angular.element($(".list0").addClass("col-xs-offset-1point5"));
        }else if(!scope.data.list2[0]){
          angular.element($(".list2").addClass("hidden"));
          angular.element($(".list0").addClass("col-xs-offset-1point5"));
        }else if(!scope.data.list3[0]){
          angular.element($(".list3").addClass("hidden"));
          angular.element($(".list0").addClass("col-xs-offset-1point5"));
        }  
      }
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("productionAssessment", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/production/prodTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    controller: ["$scope", "speechRec", function($scope, speechRec){
      $scope.toggleSpeechInput = function() {
        speechRec.toggleStartStop();
      };
    }],
    link: function(scope, elements, attrs) {
//            AutoPlay
      setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("staticPage", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/static/staticTemplate.html',
    replace: true,
    scope: {
      data: '='
    },
    link: function(scope, elements, attrs) {
//            AutoPlay
      setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
      setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
      setTimeout(function() {$(".section3").removeClass("invisible");}, 2100);
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("teachingPage", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/teaching/teachingTemplate.html',
    replace: true,
    scope: {
        data: '='
    },
    link: function(scope, elements, attrs) {
//            AutoPlay
        setTimeout(function() {$(".quoteLine").removeClass("invisible");}, 700);
        setTimeout(function() {$(".section1").removeClass("invisible");}, 700);
        setTimeout(function() {$(".section2").removeClass("invisible");}, 1400);
        setTimeout(function() {scope.data.audioPlay(scope.data.audioFile);}, 2100);
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("uniquePage", function() {
  return {
    restrict: 'AE',
    templateUrl: 'directive/unique/uniqueTemplate.html',
    replace: true
  };
});

var dojo = angular.module('dojo');

// Creating the audio element for our player
dojo.factory('audio', ["$document", function($document) {
  var audio = $document[0].createElement('audio');
  return audio;
}]);

// Our audio player
dojo.factory('player', ["audio", "$rootScope", function(audio, $rootScope) {
  var player = {

    play: function(clip) {
      audio.src = clip;
      audio.play();
      player.playing = true;
    },

    stop: function() {
      if (player.playing) {
        audio.pause();
        player.playing = false;
      }
    }
  };

  //  Stops the audio when the clip ends
  audio.addEventListener('ended', function() {
    $rootScope.$apply(player.stop());
  });
  return player;
}]);

var dojo = angular.module('dojo');

dojo.service('getLesson', ["$http", "$q", "$routeParams", function($http, $q, $routeParams){
  this.getLessonData = function(){
    var deferred = $q.defer();
    $http.get('/api/lessons/IntroduceYourself').then(function(data){
      var array = data.data[0].firstLesson;
      deferred.resolve(array);
    });
    return deferred.promise;
  };
}]);

var dojo = angular.module('dojo');

dojo.service('gradingService', function() {
  this.responseText = '';
  this.answerKey = '';
  this.gradeComp = function(userSelection, answer) {
    this.responseText = '';
    if(userSelection === answer) {
      responseArray = ['Fantastisk!', 'Det er perfekt!', 'Du er smart!'];
      this.responseText = responseArray[Math.floor(Math.random() * responseArray.length)];
      angular.element($(".response-selection").addClass("hidden"));
      angular.element($(".response-answer").removeClass("hidden"));
      angular.element($("#mascot").attr("src", 'assets/images/mascotBigSmile2.png'));
      angular.element($(".section2").addClass("invisible"));
    }else {
      this.responseText = 'Close, but the correct answer is '+ answer;
      angular.element($(".response-selection").addClass("hidden"));
      angular.element($(".response-answer").removeClass("hidden"));
      angular.element($("#mascotComp").attr("src", 'assets/images/mascotChallengeBeard.png'));
      angular.element($(".section2").addClass("invisible"));
    }
  }.bind(this);
  this.gradeProd = function(inputString, answerString) {
    this.responseText = '';
    if(inputString.toLowerCase() == answerString.toLowerCase()) {
      responseArray = ['Fantastisk!', 'Det er perfekt!', 'Du er smart!'];
      this.responseText = responseArray[Math.floor(Math.random() * responseArray.length)];
      angular.element($(".section1").addClass("hidden"));
      angular.element($(".response-answer").removeClass("hidden"));
      console.log('change mascot');
      angular.element($("#mascotProd").attr("src", 'assets/images/mascotBigSmile2.png'));
      angular.element($("#mascotConvo").attr("src", 'assets/images/mascotBigSmile2.png'));

    }else {
      this.responseText = 'Try Again';
      angular.element($(".section1").addClass("hidden"));
      angular.element($(".response-answer").removeClass("hidden"));
      angular.element($("#mascotProd").attr("src", 'assets/images/mascotChallengeBeard.png'));
      angular.element($("#mascotConvo").attr("src", 'assets/images/mascotChallengeBeard.png'));
    }
  }.bind(this);
  this.gradePatt = function(inputArray, answerArray) {
    this.responseText = '';
    if(inputArray[0].title == answerArray[0].title && inputArray[1].title == answerArray[1].title) {
      responseArray = ['Fantastisk!', 'Det er perfekt!', 'Du er smart!'];
      this.responseText = responseArray[Math.floor(Math.random() * responseArray.length)];
      angular.element($(".section1").addClass("hidden"));
      angular.element($(".patt-answer").removeClass("hidden"));
    }else {
      this.responseText = 'Try Again';
      angular.element($(".section1").addClass("hidden"));
      angular.element($(".patt-answer").removeClass("hidden"));
    }
  }.bind(this);
  this.gradeName = function(string) {
    angular.element($(".section1").addClass("hidden"));
    angular.element($(".section3").addClass("invisible"));
    angular.element($(".section4").addClass("invisible"));
    angular.element($(".section3").removeClass("hidden"));
    angular.element($(".section4").removeClass("hidden"));
    angular.element($(".section3").removeClass("invisible"));
    setTimeout(function() {$(".section4").removeClass("invisible");}, 700);
  };
  this.gradeJob = function() {
  };
});

var dojo = angular.module('dojo');

dojo.factory('speechRec', function(){
  var speechFactory = {};
  var recognizing = false;

  var recognition = new webkitSpeechRecognition();
  recognition.continuous = true;
  recognition.interimResults = true;
  reset = function(){
    recognizing = false;
    // speechToggleConvo.src = "assets/images/recordButton.png";
    speechToggleProd.src = "assets/images/recordButton.png";
  };
  recognition.onend = reset;

  recognition.onresult = function(event){
    var interim = "";
    var final = "";
    for (var i = 0; i < event.results.length; i++){
      if (event.results[i].isFinal){
        final += event.results[i][0].transcript;
      }else {
        interim += event.results[i][0].transcript;
      }
    }
    if(final === 'yy'){
      // speechInputConvo.value = 'jeg';
      speechInputProd.value = 'jeg';
    }else if(final === 'r'){
      // speechInputConvo.value = 'er';
      speechInputProd.value = 'er';
    }else if(final === 'youtube'){
      // speechInputConvo.value = 'du';
      speechInputProd.value = 'du';
    }else{
      // speechInputConvo.value = final;
      speechInputProd.value = final;
    }
    // speechInputConvo.placeholder = interim;
    speechInputProd.placeholder = interim;
  };

  speechFactory.toggleStartStop = function(){
    if(recognizing){
      recognition.stop();
      reset();
    }else {
      recognition.lang = "da-DK";
      recognition.start();
      recognizing = true;
      speechToggleConvo.src = "assets/images/stopButton.png";
      speechToggleProd.src = "assets/images/stopButton.png";
      speechInputConvo.value = "";
      speechInputProd.value = "";
      speechInputConvo.placeholder = "";
      speechInputProd.placeholder = "";
    }
  };
  return speechFactory;
});

var dojo = angular.module('dojo');

dojo.service('userInput', function() {
  this.userName = '';
  this.job = '';
  this.iAmJob = '';
  this.jobEnglish = '';
  this.jobDanish = '';
  this.jobTitle = '';
  this.jobPronunciation = '';
});

var dojo = angular.module('dojo');

dojo.directive("bootstrapModal", function() {
  return {
    restrict: 'AE',
    templateUrl: 'bootstrap/modal/modalTemplate.html',
    replace: true,
    scope: {
      title: '=',
      body: '=',
      audioFile: '=',
      audioPlay: '&'
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("navigationButtons", function() {
  return {
    restrict: 'AE',
    templateUrl: 'bootstrap/nav/navTemplate.html',
    replace: true,
    scope: {
      nextSlide: '&',
      prevSlide: '&',
      grade: '&',
      submitButton: '='
    },
    controller: ["$scope", function($scope) {

    }],
    link: function(scope, elements, attrs) {
      if(scope.submitButton) {
        angular.element($("#next").addClass("hidden"));
        angular.element($("#submit").removeClass("hidden"));
      }
    }
  };
});

var dojo = angular.module('dojo');

dojo.directive("progressBar", function() {
  return {
    restrict: 'AE',
    templateUrl: 'bootstrap/progress/progressTemplate.html',
    replace: true,
    scope: {
      slideNumber: '=',
      slideMax: '='
    }
  };
});

/**
 * jQuery Voice plugin 0.3 (31st May 2015)
 * Copyright Subin Siby - http://subinsb.com
 *
 * ------------------
 * Licensed under MIT
 * ------------------
 *
 * A jQuery plugin to record, play & download microphone input sound from the user.
 * NEEDS recorder.js and recorderWorker.js to work - https://github.com/mattdiamond/Recorderjs
 *
 * To use MP3 conversion, NEEDS mp3Worker.js, libmp3lame.min.js and recorder.js from https://github.com/nusofthq/Recordmp3js/tree/master/js
 *
 * Full Documentation & Support - http://subinsb.com/html5-record-mic-voice
*/

(function(window){
  window.Fr = window.Fr || {};
	Fr.voice = {
    workerPath: "assets/recorderWorker.js",
    mp3WorkerPath: "js/mp3Worker.js",
    stream: false,

    init_called: false,

    /**
     * Initialize. Set up variables.
     */
    init: function(){
    	try {
    		// Fix up for prefixing
    		window.AudioContext = window.AudioContext||window.webkitAudioContext;
    		navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    		window.URL = window.URL || window.webkitURL;
    		if(navigator.getUserMedia === false){
          alert('getUserMedia() is not supported in your browser');
    		}
    		this.context = new AudioContext();
    	}catch(e) {
    		alert('Web Audio API is not supported in this browser');
    	}
    },

    /**
     * Start recording audio
     */
    record: function(output, callback){
    	callback = callback || function(){};
      if(this.init_called === false){
    		this.init();
    		this.init_called = true;
    	}
      $that = this;
    	navigator.getUserMedia({audio: true}, function(stream){
    		var input = $that.context.createMediaStreamSource(stream);
    		if(output === true){
          input.connect($that.context.destination);
    		}
    		$that.recorder = new Recorder(input, {
          workerPath : $that.workerPath,
          mp3WorkerPath : $that.mp3WorkerPath
    		});
    		$that.stream = stream;
    		$that.recorder.record();
    		callback(stream);
    	}, function() {
    		alert('No live audio input');
    	});
    },

    /**
     * Stop recording audio
     */
    stop: function(){
    	this.recorder.stop();
    	this.recorder.clear();
    	this.stream.stop();
    	return this;
    },

    /**
     * Export the recorded audio to different formats :
     * BLOB, MP3, Base64, BLOB URL
     */
    export: function(callback, type){
      if(type == "mp3"){
        this.recorder.exportMP3(callback);
      }else{
        this.recorder.exportWAV(function(blob) {
          if(type == "" || type == "blob"){
            callback(blob);
          }else if (type == "base64"){
            var reader = new window.FileReader();
            reader.readAsDataURL(blob);
            reader.onloadend = function() {
              base64data = reader.result;
              callback(base64data);
            };
          }else if(type == "URL"){
            var url = URL.createObjectURL(blob);
            callback(url);
          }
        });
      }
    }
  };
})(window);

$(document).ready(function(){
  $(document).on("click", "#record:not(.disabled)", function(){
    elem = $(this);
    Fr.voice.record($("#live").is(":checked"), function(){
      elem.addClass("hidden");
      $("#stop").removeClass("hidden");
    });
  });
    
  $(document).on("click", "#record2:not(.disabled)", function(){
    elem = $(this);
    Fr.voice.record($("#live").is(":checked"), function(){
      elem.addClass("hidden");
      $("#stop").removeClass("hidden");
      $("#play").addClass("hidden");
    });
  });
  
  $(document).on("click", "#stop:not(.disabled)", function(){
    Fr.voice.export(function(url){
      $("#audio").attr("src", url);
    }, "URL");
    Fr.voice.stop();
    elem = $(this);
    $("#record2").removeClass("hidden");
    $("#play").removeClass("hidden");
    elem.addClass("hidden");
  });
    
  $(document).on("click", "#play:not(.disabled)", function(){
      $("#audio").trigger("play");
  });
});

(function(window){

  /**
   * These URLs can't be used, so download these files from the URL, store locally and then
   * change the values `workerPath` and `mp3WorkerPath` in jquery.voice.js
   */
  var WORKER_PATH = 'assets/recorderWorker.js';
//  var mp3WorkerPath = 'http://lab.subinsb.com/projects/jquery/voice/mp3Worker.js';

  var Recorder = function(source, cfg){
    var config = cfg || {};
    var bufferLen = config.bufferLen || 4096;
    this.context = source.context;
    this.node = (this.context.createScriptProcessor ||
                 this.context.createJavaScriptNode).call(this.context,
                                                         bufferLen, 2, 2);
    var worker = new Worker(config.workerPath || WORKER_PATH);

    worker.postMessage({
      command: 'init',
      config: {
        sampleRate: this.context.sampleRate
      }
    });
    var recording = false,
      currCallback;

    this.node.onaudioprocess = function(e){
      if (!recording) return;
      worker.postMessage({
        command: 'record',
        buffer: [
          e.inputBuffer.getChannelData(0),
          e.inputBuffer.getChannelData(1)
        ]
      });
    }

    this.configure = function(cfg){
      for (var prop in cfg){
        if (cfg.hasOwnProperty(prop)){
          config[prop] = cfg[prop];
        }
      }
    }

    this.record = function(){
      recording = true;
    }

    this.stop = function(){
      recording = false;
    }

    this.clear = function(){
      worker.postMessage({ command: 'clear' });
    }

    this.getBuffer = function(cb) {
      currCallback = cb || config.callback;
      worker.postMessage({ command: 'getBuffer' })
    }

    this.exportWAV = function(cb, type){
      currCallback = cb || config.callback;
      type = type || config.type || 'audio/wav';
      if (!currCallback) throw new Error('Callback not set');
      worker.postMessage({
        command: 'exportWAV',
        type: type
      });
      worker.onmessage = function(e){
        var blob = e.data;
        currCallback(blob);
      }
    }

    this.exportMP3 = function(cb){
      // MP3 conversion
      this.exportWAV(function(){});
      currCallback = cb || config.callback;

      var encoderWorker = new Worker(config.mp3WorkerPath || mp3WorkerPath);
      worker.onmessage = function(e){
        var blob = e.data;

        var arrayBuffer;
        var fileReader = new FileReader();

        fileReader.onload = function(){
          arrayBuffer = this.result;
          var buffer = new Uint8Array(arrayBuffer),
          data = parseWav(buffer);

          encoderWorker.postMessage({ cmd: 'init', config:{
            mode : 3,
            channels:1,
            samplerate: data.sampleRate,
            bitrate: data.bitsPerSample
          }});

          encoderWorker.postMessage({ cmd: 'encode', buf: Uint8ArrayToFloat32Array(data.samples) });
          encoderWorker.onmessage = function(e) {
            if (e.data.cmd == 'data') {
              var url = 'data:audio/mp3;base64,' + encode64(e.data.buf);
              currCallback(url);
              console.log("Done converting to Mp3");
            }
          };
        };
        fileReader.readAsArrayBuffer(blob);
      }
    }

    source.connect(this.node);
    this.node.connect(this.context.destination);    //this should not be necessary
  }

  function parseWav(wav) {
    function readInt(i, bytes) {
      var ret = 0,
      shft = 0;

      while (bytes) {
        ret += wav[i] << shft;
        shft += 8;
          i++;
        bytes--;
      }
      return ret;
    }
    if (readInt(20, 2) != 1) throw 'Invalid compression code, not PCM';
    return {
      sampleRate: readInt(24, 4),
      bitsPerSample: readInt(34, 2),
      samples: wav.subarray(44)
    };
  }

  function Uint8ArrayToFloat32Array(u8a){
    var f32Buffer = new Float32Array(u8a.length);
    for (var i = 0; i < u8a.length; i++) {
      var value = u8a[i<<1] + (u8a[(i<<1)+1]<<8);
      if (value >= 0x8000) value |= ~0x7FFF;
      f32Buffer[i] = value / 0x8000;
    }
    return f32Buffer;
  }

  function encode64(buffer) {
    var binary = '',
    bytes = new Uint8Array( buffer ),
    len = bytes.byteLength;

    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode( bytes[ i ] );
    }
    return window.btoa( binary );
  }

  Recorder.forceDownload = function(blob, filename){
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = filename || 'output.wav';
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
  }

  window.Recorder = Recorder;

})(window);

var recLength = 0,
  recBuffersL = [],
  recBuffersR = [],
  sampleRate;

this.onmessage = function(e){
  switch(e.data.command){
    case 'init':
      init(e.data.config);
      break;
    case 'record':
      record(e.data.buffer);
      break;
    case 'exportWAV':
      exportWAV(e.data.type);
      break;
    case 'getBuffer':
      getBuffer();
      break;
    case 'clear':
      clear();
      break;
  }
};

function init(config){
  sampleRate = config.sampleRate;
}

function record(inputBuffer){
  recBuffersL.push(inputBuffer[0]);
  recBuffersR.push(inputBuffer[1]);
  recLength += inputBuffer[0].length;
}

function exportWAV(type){
  var bufferL = mergeBuffers(recBuffersL, recLength);
  var bufferR = mergeBuffers(recBuffersR, recLength);
  var interleaved = interleave(bufferL, bufferR);
  var dataview = encodeWAV(interleaved);
  var audioBlob = new Blob([dataview], { type: type });

  this.postMessage(audioBlob);
}

function getBuffer() {
  var buffers = [];
  buffers.push( mergeBuffers(recBuffersL, recLength) );
  buffers.push( mergeBuffers(recBuffersR, recLength) );
  this.postMessage(buffers);
}

function clear(){
  recLength = 0;
  recBuffersL = [];
  recBuffersR = [];
}

function mergeBuffers(recBuffers, recLength){
  var result = new Float32Array(recLength);
  var offset = 0;
  for (var i = 0; i < recBuffers.length; i++){
    result.set(recBuffers[i], offset);
    offset += recBuffers[i].length;
  }
  return result;
}

function interleave(inputL, inputR){
  var length = inputL.length + inputR.length;
  var result = new Float32Array(length);

  var index = 0,
    inputIndex = 0;

  while (index < length){
    result[index++] = inputL[inputIndex];
    result[index++] = inputR[inputIndex];
    inputIndex++;
  }
  return result;
}

function floatTo16BitPCM(output, offset, input){
  for (var i = 0; i < input.length; i++, offset+=2){
    var s = Math.max(-1, Math.min(1, input[i]));
    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
  }
}

function writeString(view, offset, string){
  for (var i = 0; i < string.length; i++){
    view.setUint8(offset + i, string.charCodeAt(i));
  }
}

function encodeWAV(samples){
  var buffer = new ArrayBuffer(44 + samples.length * 2);
  var view = new DataView(buffer);

  /* RIFF identifier */
  writeString(view, 0, 'RIFF');
  /* RIFF chunk length */
  view.setUint32(4, 36 + samples.length * 2, true);
  /* RIFF type */
  writeString(view, 8, 'WAVE');
  /* format chunk identifier */
  writeString(view, 12, 'fmt ');
  /* format chunk length */
  view.setUint32(16, 16, true);
  /* sample format (raw) */
  view.setUint16(20, 1, true);
  /* channel count */
  view.setUint16(22, 2, true);
  /* sample rate */
  view.setUint32(24, sampleRate, true);
  /* byte rate (sample rate * block align) */
  view.setUint32(28, sampleRate * 4, true);
  /* block align (channel count * bytes per sample) */
  view.setUint16(32, 4, true);
  /* bits per sample */
  view.setUint16(34, 16, true);
  /* data chunk identifier */
  writeString(view, 36, 'data');
  /* data chunk length */
  view.setUint32(40, samples.length * 2, true);

  floatTo16BitPCM(view, 44, samples);

  return view;
}
